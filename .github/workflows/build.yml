name: Build ASI

on: [push]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Prepare JS parts
      shell: pwsh
      run: |
        # 1. Создаем структуру папок
        New-Item -ItemType Directory -Path "ASI_Loader" -Force
        New-Item -ItemType Directory -Path "ASI_Loader/js_parts" -Force

        # 2. Читаем JS-файл как текст (сохраняем переносы строк)
        $content = [System.IO.File]::ReadAllText("custom.js", [System.Text.Encoding]::UTF8)

        # 3. Разбиваем на части по 15KB (с запасом)
        $chunkSize = 15000
        $parts = [System.Collections.ArrayList]@()
        for ($i=0; $i -lt $content.Length; $i+=$chunkSize) {
            $chunk = $content.Substring($i, [Math]::Min($chunkSize, $content.Length - $i))
            $partPath = "ASI_Loader/js_parts/part_$($i.ToString('00000')).h"
            Set-Content -Path $partPath -Value "R\"=====($chunk)=====\"" -NoNewline
            $parts.Add($partPath) | Out-Null
        }

        # 4. Генерируем основной заголовочный файл
        $headerContent = @"
// Auto-generated file
const char* js_parts[] = {
$((Get-Content $parts -Raw) -join ",\n")
};
const int js_parts_count = $($parts.Count);
"@
        Set-Content -Path "ASI_Loader/js_data.h" -Value $headerContent

    - name: Compile ASI
      shell: cmd
      run: |
        cl /EHsc /std:c++17 /LD ASI_Loader\ASI_Loader.cpp /Fe:ASI_Loader.asi /link shlwapi.lib
        if %errorlevel% neq 0 exit /b %errorlevel%

    - uses: actions/upload-artifact@v4
      with:
        name: ASI_Loader
        path: ASI_Loader.asi
